input {
  jdbc{
    # mysql 数据库链接
    # jdbc_connection_string => "jdbc:mysql:192.168.0.10:3306/mysql?characterEncoding=utf8"
    jdbc_connection_string => "jdbc:mysql://192.168.30.240:33060/htcloud_dev?serverTimezone=GMT%2B8&useUnicode=true&characterEncoding=utf8&allowMultiQueries=true"
    # 用户名和密码
    jdbc_user => "root"
    jdbc_password => "root@2020"
    # 驱动
    jdbc_driver_library => "/usr/share/logstash/mysql-connector-java-8.0.20.jar"
    # 驱动类名
    jdbc_driver_class => "com.mysql.jdbc.Driver"
    jdbc_paging_enabled => "true"
    jdbc_page_size => "50000"
    jdbc_default_timezone =>"Asia/Shanghai"
    # mysql文件, 也可以直接写SQL语句在此处，如下：
    statement => "select 'OMS-00001' as 'appId', 'OMS-RWO-00001' as 'moduleId', 'Oms Receive Write Out Log' as 'title', id, business_type as 'businessType', data_id as 'dataId', operation_type as 'operationType', operator as 'userName', date_format(operation_date, '%Y-%m-%d %H:%i:%s') as 'operateTime', remarks as 'remark' from oms_receive_writeout_log order by id asc"
    # statement_filepath => "./config/jdbc.sql"
    # 这里类似crontab,可以定制定时操作，比如每5分钟执行一次同步(分 时 天 月 年)
    schedule => "* * * * *"
    type => "oms_receive_writeout_log"
    # 是否记录上次执行结果, 如果为真,将会把上次执行到的 tracking_column 字段的值记录下来,保存到 last_run_metadata_path 指定的文件中
    # record_last_run => true
    # 是否需要记录某个column 的值,如果record_last_run为真,可以自定义我们需要 track 的 column 名称，此时该参数就要为 true. 否则默认 track 的是 timestamp 的值.
    # use_column_value => true
    # 如果 use_column_value 为真,需配置此参数. track 的数据库 column 名,该 column 必须是递增的. 一般是mysql主键
    # tracking_column => "update_time"
    # tracking_column_type => "timestamp"
    # last_run_metadata_path => "./logstash_capital_bill_last_id"
    # 是否清除 last_run_metadata_path 的记录,如果为真那么每次都相当于从头开始查询所有的数据库记录
    # clean_run => false
    # 是否将 字段(column) 名称转小写
    lowercase_column_names => false
  }
  jdbc{
      # mysql 数据库链接
      # jdbc_connection_string => "jdbc:mysql:192.168.0.10:3306/mysql?characterEncoding=utf8"
      jdbc_connection_string => "jdbc:mysql://192.168.30.240:33060/htcloud_dev?serverTimezone=GMT%2B8&useUnicode=true&characterEncoding=utf8&allowMultiQueries=true"
      # 用户名和密码
      jdbc_user => "root"
      jdbc_password => "root@2020"
      # 驱动
      jdbc_driver_library => "/usr/share/logstash/mysql-connector-java-8.0.20.jar"
      # 驱动类名
      jdbc_driver_class => "com.mysql.jdbc.Driver"
      jdbc_paging_enabled => "true"
      jdbc_page_size => "50000"
      jdbc_default_timezone =>"Asia/Shanghai"
      # mysql文件, 也可以直接写SQL语句在此处，如下：
      statement => "select 'OMS-00001' as 'appId', 'OMS-TM-00001' as 'moduleId', 'Oms Tracking Modify Log' as 'title', id, business_type as 'businessType', data_id as 'dataId', operation_type as 'operationType', operator as 'userName', date_format(operation_date, '%Y-%m-%d %H:%i:%s') as 'operateTime', remarks as 'remark' from oms_tracking_modify_log order by id asc"
      # statement_filepath => "./config/jdbc.sql"
      # 这里类似crontab,可以定制定时操作，比如每5分钟执行一次同步(分 时 天 月 年)
      schedule => "* * * * *"
      type => "oms_tracking_modify_log"
      # 是否记录上次执行结果, 如果为真,将会把上次执行到的 tracking_column 字段的值记录下来,保存到 last_run_metadata_path 指定的文件中
      # record_last_run => true
      # 是否需要记录某个column 的值,如果record_last_run为真,可以自定义我们需要 track 的 column 名称，此时该参数就要为 true. 否则默认 track 的是 timestamp 的值.
      # use_column_value => true
      # 如果 use_column_value 为真,需配置此参数. track 的数据库 column 名,该 column 必须是递增的. 一般是mysql主键
      # tracking_column => "update_time"
      # tracking_column_type => "timestamp"
      # last_run_metadata_path => "./logstash_capital_bill_last_id"
      # 是否清除 last_run_metadata_path 的记录,如果为真那么每次都相当于从头开始查询所有的数据库记录
      # clean_run => false
      # 是否将 字段(column) 名称转小写
      lowercase_column_names => false
    }
}

filter {
    json {
        source => "message"
        remove_field => ["message"]
    }
    date {
        match => ["operateTime", "yyyy-MM-dd HH:mm:ss"]
    }
}

output {
  if [type] == "oms_receive_writeout_log" {
    elasticsearch {
      hosts => "http://192.168.30.180:9200"
      # hosts => "http://192.168.20.253:9200"
      # user => "elastic"
      # password => "jackery@123"
      # ES索引名称
      # index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
      index => "service_logs"
      # 将表Id作为ES的主键，防止数据重复，这样会影响效率，双刃剑
      document_id => "%{id}"
      # 文档类型
      document_type => "_doc"
    }
  }
  if [type] == "oms_tracking_modify_log" {
      elasticsearch {
        hosts => "http://192.168.30.180:9200"
        # hosts => "http://192.168.20.253:9200"
        # user => "elastic"
        # password => "jackery@123"
        # ES索引名称
        # index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
        index => "service_logs"
        # 将表Id作为ES的主键，防止数据重复，这样会影响效率，双刃剑
        document_id => "%{id}"
        # 文档类型
        document_type => "_doc"
      }
    }
 # 打印信息，生产环境不需要
 stdout {
     codec => json_lines
 }
}
